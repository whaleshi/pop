import React, { forwardRef, useMemo, useState, useCallback, useEffect, type ReactNode } from "react";
import type { AvatarProps as BaseAvatarProps } from "@heroui/react";
import { AvatarIcon, useAvatar } from "@heroui/react";

export interface AvatarProps extends BaseAvatarProps {
	/**
	 * 可选形状：
	 * - circle: 完全圆形（默认）
	 * - rounded: 圆角矩形
	 * - square: 直角方形
	 */
	shape?: "circle" | "rounded" | "square";
	/**
	 * 自定义圆角（优先级高于 shape 映射），如 "12px" 或 12。
	 */
	borderRadius?: string | number;
}

const MyAvatarInner = forwardRef<HTMLSpanElement, AvatarProps>((props, ref) => {
	const { shape, borderRadius, radius: radiusProp, ...rest } = props;
	// 将自定义 shape 映射为 HeroUI 的 radius 取值
	const mappedRadius: BaseAvatarProps["radius"] | undefined = (() => {
		if (radiusProp) return radiusProp;
		if (!shape) return undefined; // 使用库默认（通常是 full）
		const map: Record<string, BaseAvatarProps["radius"]> = {
			circle: "full",
			rounded: "md",
			square: "none",
		} as const;
		return map[shape];
	})();
	const {
		src,
		icon = <AvatarIcon />,
		alt,
		classNames,
		slots,
		name,
		showFallback,
		fallback: fallbackComponent,
		getInitials,
		getAvatarProps,
		getImageProps,
	} = useAvatar({
		ref,
		...(mappedRadius ? { radius: mappedRadius } : {}),
		...rest,
	});

	// 统一 SSR 与首次客户端渲染：若有 src，初始一律认为 loading，避免水合不匹配
	const [isLoading, setIsLoading] = useState<boolean>(!!src);
	const [isError, setIsError] = useState(false);

	// 处理图片加载、错误状态
	const handleLoad = useCallback(() => {
		setIsLoading(false);
		setIsError(false);
	}, []);

	const handleError = useCallback(() => {
		setIsLoading(false);
		setIsError(true);
	}, []);

	// 仅当 src 变化时重置内部状态，避免无关重渲染引发短暂 fallback
	useEffect(() => {
		let active = true;
		if (!src) {
			setIsLoading(false);
			setIsError(false);
			return;
		}
		const img = new Image();
		img.src = src;
		if (img.complete) {
			active && setIsLoading(false);
			active && setIsError(false);
		} else {
			active && setIsLoading(true);
			active && setIsError(false);
			img.onload = () => { active && setIsLoading(false); };
			img.onerror = () => { active && setIsError(true); };
		}
		return () => { active = false; };
	}, [src]);

	const Wrapper = ({ children }: { children: ReactNode }) => (
		<span
			aria-label={alt || name || "avatar"}
			className={slots.fallback({ class: classNames?.fallback })}
			role="img"
			style={{
				display: "flex",
				alignItems: "center",
				justifyContent: "center",
				width: "100%",
				height: "100%",
				...(borderRadius !== undefined
					? { borderRadius: typeof borderRadius === "number" ? `${borderRadius}px` : borderRadius }
					: {}),
			}}
		>
			{children}
		</span>
	);

	const fallback = useMemo(() => {
		const ariaLabel = alt || name || "avatar";

		if (isError) return <Wrapper><ErrorIcon /></Wrapper>;
		if (isLoading) return <Wrapper><LoadingIcon /></Wrapper>;

		if (!showFallback && src && !isError) return null;

		if (fallbackComponent) {
			return (
				<div
					aria-label={ariaLabel}
					className={slots.fallback({ class: classNames?.fallback })}
					role="img"
				>
					{fallbackComponent}
				</div>
			);
		}

		if (name) {
			return (
				<span
					aria-label={ariaLabel}
					className={slots.name({ class: classNames?.name })}
					role="img"
				>
					{getInitials(name)}
				</span>
			);
		}

		return (
			<span
				aria-label={ariaLabel}
				className={slots.icon({ class: classNames?.icon })}
				role="img"
			>
				{icon}
			</span>
		);
	}, [
		alt,
		name,
		icon,
		src,
		isError,
		isLoading,
		showFallback,
		fallbackComponent,
		classNames,
		slots,
		getInitials,
	]);

	const imageProps = getImageProps();
	const containerProps = getAvatarProps();
	const mergedContainerStyle = {
		...(containerProps as any).style,
		...(borderRadius !== undefined
			? { borderRadius: typeof borderRadius === "number" ? `${borderRadius}px` : borderRadius, overflow: "hidden" as const }
			: { overflow: "hidden" as const }),
		willChange: 'transform',
		contain: 'paint layout style',
	} as React.CSSProperties;
	const mergedImgStyle = {
		...(imageProps as any).style,
		...(borderRadius !== undefined
			? { borderRadius: typeof borderRadius === "number" ? `${borderRadius}px` : borderRadius }
			: {}),
	} as React.CSSProperties;

	return (
		<div {...containerProps} style={mergedContainerStyle} suppressHydrationWarning>
			{src && !isError && (
				<img
					{...imageProps}
					alt={alt}
					style={mergedImgStyle}
					onLoad={(e) => { imageProps.onLoad?.(e); handleLoad(); }}
					onError={(e) => { imageProps.onError?.(e); handleError(); }}
				/>
			)}
			{fallback}
		</div>
	);
});

MyAvatarInner.displayName = "MyAvatar";

// 避免无关状态变更导致头像重渲染
const areEqual = (prev: Omit<AvatarProps, "ref">, next: Omit<AvatarProps, "ref">) => {
	return (
		prev.src === next.src &&
		prev.alt === next.alt &&
		prev.shape === next.shape &&
		prev.borderRadius === next.borderRadius &&
		prev.className === next.className
	);
};

export default React.memo(MyAvatarInner, areEqual);

const LoadingIcon = () => (
	<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none" className="w-full h-full">
		<rect width="48" height="48" fill="#C2C2C2" />
		<path d="M13.7971 14.1819C14.1291 13.9974 14.5328 13.9515 14.9128 14.0522C15.2928 14.1529 15.6164 14.3916 15.806 14.7143C15.9959 15.0371 16.0365 15.4174 15.925 15.7731C15.875 15.9341 15.8228 16.0938 15.768 16.2528C15.3378 17.4905 14.7863 18.6709 14.0626 19.79C14.0608 19.8208 14.0591 19.8518 14.0574 19.8831C13.8894 23.1006 13.5796 26.4118 13.0014 29.611C12.9702 29.792 12.9398 29.965 12.9078 30.1461C12.8557 30.4404 12.6849 30.703 12.4338 30.8764C12.1826 31.0498 11.8715 31.1197 11.5684 31.0706C11.2652 31.0215 10.9943 30.8574 10.8146 30.6142C10.6349 30.3711 10.561 30.0686 10.61 29.7738C10.6396 29.5953 10.6674 29.425 10.6962 29.2471C11.0736 27.019 11.3128 24.8062 11.4691 22.5655C11.0446 22.8799 10.6057 23.1622 10.1663 23.4114C10.0199 23.4956 9.87327 23.5771 9.72567 23.6567C9.46293 23.7977 9.14875 23.8308 8.85504 23.7532C8.56119 23.6753 8.31163 23.493 8.15889 23.2421C8.0062 22.9912 7.96191 22.691 8.03318 22.4033C8.10465 22.1158 8.28598 21.8643 8.53969 21.7084C8.66549 21.6309 8.78892 21.5527 8.91053 21.473C10.0001 20.7637 10.8874 19.9524 11.5116 18.9523C12.1781 17.8926 12.6911 16.6733 13.0346 15.4433C13.0723 15.3077 13.1079 15.172 13.1414 15.0356C13.2312 14.6741 13.4647 14.3663 13.7971 14.1819Z" fill="#EBEBEF" />
		<path d="M17.9706 14.8748C18.5293 13.4273 20.5254 14.0027 20.0815 15.62C19.951 15.9581 19.9074 16.3208 19.7981 16.6195C20.7508 16.6195 21.7085 16.5869 22.6605 16.6135C24.9087 16.6764 24.8532 18.7468 24.5203 19.9328C24.3233 20.794 23.9654 21.7657 22.7975 21.5377C22.1916 21.3277 21.8629 20.8449 22.079 20.2562C22.1956 19.8951 22.398 19.4848 22.2028 19.1577C22.1087 19.0002 21.9058 18.8829 21.4921 18.8829H18.8609C18.3479 19.8057 17.0178 22.9567 15.2977 21.9352C15.242 21.9021 15.189 21.8608 15.1475 21.8116C14.7612 21.3537 14.8227 20.545 15.0317 20.2912C15.8201 19.3337 16.5191 18.3044 17.0293 17.2704C17.0322 17.2644 17.0352 17.2585 17.0382 17.2525C17.3778 16.5609 17.5204 16.0412 17.9706 14.8748Z" fill="#EBEBEF" />
		<path d="M17.2451 23.6696C17.4114 23.8223 17.5163 24.0296 17.5292 24.2455C17.5329 24.3233 17.5344 24.4017 17.534 24.4782C17.4777 25.8734 17.1098 26.9919 16.2986 28.2169C16.2433 28.2904 16.1814 28.368 16.0944 28.4581C15.8985 28.6721 15.6269 28.796 15.3324 28.7958C15.0383 28.796 14.7455 28.6721 14.5253 28.4581C13.9788 27.9271 14.1043 27.3723 14.5253 26.8332C15.1989 25.9706 15.6408 25.2111 15.7537 24.3534C15.7897 24.0798 15.8647 23.8143 16.0379 23.6696C16.378 23.3581 16.905 23.3581 17.2451 23.6696Z" fill="#EBEBEF" />
		<path fillRule="evenodd" clipRule="evenodd" d="M27.196 15.135C27.2741 14.5145 27.855 14.0729 28.4936 14.1488C29.1321 14.2247 29.5864 14.7892 29.5083 15.4096C29.4533 15.847 29.3939 16.2664 29.3323 16.6684C29.7259 16.6717 30.1194 16.6749 30.5127 16.6781L30.9765 16.7748C31.8304 17.1808 32.0477 17.8685 32.1766 18.3198C32.2956 18.7934 32.3132 19.2142 32.3077 19.6168C32.2894 20.4176 32.1571 21.1512 31.9806 21.869C31.6193 23.3 31.0669 24.6514 30.33 25.9299C30.3157 25.954 30.3008 25.9779 30.2864 26.002C30.5088 26.1755 30.7292 26.3444 30.9409 26.5061C31.3625 26.8279 31.7801 27.1446 32.0632 27.3891C32.544 27.8044 32.5872 28.5196 32.1599 28.9868C31.7325 29.4539 30.9963 29.496 30.5155 29.0807C30.2993 28.894 29.9539 28.631 29.5016 28.2858C29.3274 28.1527 29.1417 28.0102 28.9498 27.8614C28.0075 28.9488 26.8489 29.8739 25.4038 30.4754C25.0455 30.6167 24.6654 30.7318 24.2677 30.8046C24.0095 30.8513 23.7417 30.7959 23.5236 30.6519C23.3054 30.5078 23.1547 30.2868 23.1044 30.0363C23.0542 29.7859 23.1083 29.5262 23.2546 29.313C23.4011 29.0999 23.628 28.9506 23.8853 28.8996C24.1318 28.8502 24.3839 28.7708 24.6324 28.6678C25.6587 28.2315 26.5908 27.4656 27.3633 26.547C27.118 26.3225 26.883 26.0928 26.6728 25.8626C26.2947 25.4484 25.8753 24.9064 25.7204 24.3044L25.7092 24.2606L25.7016 24.216C25.614 23.7056 25.6679 23.1527 25.7551 22.6227C25.8444 22.0803 25.9907 21.4454 26.1513 20.7475C26.2777 20.1982 26.4182 19.5875 26.5605 18.9067C26.5091 18.9072 26.4579 18.9076 26.4068 18.908C26.0979 18.9106 25.8017 18.7936 25.5832 18.5814C25.3648 18.3692 25.2421 18.079 25.2421 17.7763C25.2421 17.4736 25.3648 17.1834 25.5832 16.9713C25.8017 16.759 26.098 16.6421 26.4068 16.6446C26.5956 16.6462 26.7872 16.6477 26.9788 16.6493C27.0554 16.1713 27.129 15.6672 27.196 15.135ZM29.1209 18.8866C29.0154 18.8865 28.9251 18.96 28.9045 19.0612C28.736 19.889 28.5693 20.6131 28.4246 21.2415C28.2589 21.9616 28.1311 22.5211 28.0555 22.9801C28.0052 23.2859 27.8973 23.6619 28.079 23.9395C28.1548 24.0554 28.2656 24.1962 28.4155 24.3605C28.4883 24.4402 28.5673 24.5219 28.6513 24.6054C29.1815 23.5862 29.5911 22.4891 29.8484 21.3849C29.9944 20.7497 30.259 19.7636 30.1461 19.0566C30.1304 18.9584 30.04 18.892 29.9383 18.8918C29.6771 18.8915 29.3829 18.887 29.1209 18.8866Z" fill="#EBEBEF" />
		<path d="M33.8954 14.3257C35.2763 14.3084 36.6572 14.3293 38.0381 14.3257C38.8352 14.3237 39.8614 15.1593 39.834 16.1591C39.8353 16.5558 39.7995 16.8816 39.5685 17.1758C38.8264 18.152 37.9292 19.1013 37.0145 19.9777C36.8206 20.1635 36.7544 20.4439 36.8099 20.7038C36.8306 20.8005 36.862 20.8804 36.9064 20.9632C36.9502 21.0449 37.0824 21.1188 37.215 21.1188H38.8502C39.4935 21.1188 40 21.2266 40 22.0891C40 22.9333 39.4785 23.2871 38.8353 23.2872H37.3152C37.1917 23.2872 37.0919 23.3857 37.0924 23.5065C37.0964 24.5974 37.0556 25.6874 36.9488 26.7254C36.738 28.7739 35.9747 30.4573 34.348 31.9159C32.9159 33.2063 31.0608 33.7118 29.4174 33.897C28.875 33.9589 28.3538 33.9884 27.8229 33.9998C27.5219 34.0051 27.2251 33.9046 26.9974 33.7094C26.7697 33.5143 26.6295 33.2421 26.6077 32.9509C26.5859 32.6597 26.6841 32.3708 26.8803 32.1458C27.0766 31.9207 27.3552 31.7794 27.6539 31.7423C28.1294 31.6822 28.5833 31.6122 29.0362 31.5235C30.4313 31.2526 31.682 30.7973 32.5413 30.0147C33.5169 29.1608 34.248 27.9383 34.5075 26.4019C34.6618 25.4782 34.7222 24.5027 34.7325 23.5053C34.7337 23.3849 34.634 23.2872 34.511 23.2872H33.7457C33.634 23.2872 33.1949 23.2905 32.8889 23.2872C32.6419 23.2845 32.4447 23.0866 32.4487 22.8466C32.4547 22.4909 32.5556 21.8261 32.6443 21.5875C32.738 21.3356 32.8512 21.1188 33.1111 21.1188H34.4529C34.579 21.1188 34.6798 21.0167 34.6744 20.8943C34.657 20.5008 34.6376 20.1078 34.6185 19.7171C34.6643 18.4947 36.1144 17.7589 36.8779 16.9256C37.0015 16.7907 36.9014 16.5831 36.7156 16.5819C35.7979 16.5765 34.7657 16.5684 33.8954 16.5575C33.3967 16.5512 32.8978 16.5441 32.3991 16.536C32.0927 16.5311 31.7988 16.4113 31.5822 16.1995C31.3656 15.9878 31.2439 15.7019 31.2439 15.4043C31.2439 15.1068 31.3656 14.8209 31.5822 14.6092C31.7988 14.3974 32.0927 14.3311 32.3991 14.3262C32.8978 14.3181 33.3967 14.332 33.8954 14.3257Z" fill="#EBEBEF" />
		<path d="M20.5358 20.6566C20.3194 20.4256 20.0682 20.3799 19.7486 20.3641C19.429 20.3482 18.9518 20.4483 18.7124 20.6566C18.2167 21.0878 18.306 21.5501 18.2921 22.0523C18.2921 23.4908 18.1984 25.7995 18.0841 27.6958C18.0364 28.4812 17.6179 29.2713 17.0858 29.8591C16.5813 30.418 15.9241 30.8447 15.1714 31.0784C15.0075 31.1293 14.8388 31.1711 14.6657 31.2035C14.3729 31.2507 14.0997 31.3942 13.9078 31.619C13.7159 31.8435 13.6205 32.1287 13.6432 32.4152C13.6659 32.7016 13.805 32.9691 14.03 33.1625C14.2551 33.3561 14.5475 33.4573 14.8443 33.4605C15.1263 33.4588 15.4093 33.4366 15.6902 33.3933C16.9839 33.1984 18.2161 32.5371 19.0882 31.565C20.0114 30.5483 20.5637 29.2135 20.6214 27.8619C20.6702 26.7712 20.7141 25.6803 20.7542 24.5891C20.7544 24.5853 20.7551 24.5816 20.7563 24.578C20.7607 24.5652 20.7715 24.5554 20.7849 24.5524C21.0088 24.5024 21.2389 24.5169 21.5733 24.8059C21.6015 24.8278 21.6261 24.8481 21.6479 24.8672C21.6939 24.9076 21.7271 24.9419 21.7582 24.9794C21.9933 25.2326 22.2119 26.0924 22.346 26.8677C22.3548 26.9171 22.3638 26.9677 22.3726 27.0194C22.4234 27.3154 22.5931 27.5797 22.8444 27.7541C23.0958 27.9286 23.4084 27.9989 23.7131 27.9495C24.0178 27.9002 24.2898 27.7353 24.4693 27.4911C24.6489 27.2468 24.682 26.9137 24.6312 26.6176C24.3194 24.8 23.7131 22.7732 21.7276 22.6872C21.3719 22.6379 21.1586 22.8558 20.916 22.7557C20.8506 22.7287 20.8206 22.658 20.8229 22.5886C20.8276 22.448 20.8325 22.3073 20.8368 22.1667C20.8437 21.9454 20.8503 21.724 20.8568 21.5027C20.8658 21.1917 20.7522 20.8875 20.5358 20.6566Z" fill="#EBEBEF" />
	</svg>
)

const ErrorIcon = () => (
	<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" fill="none" className="w-full h-full">
		<rect width="48" height="48" fill="#C2C2C2" />
		<path d="M28.6055 13C30.2428 13 31.6078 13.3979 32.6523 14.1445L33.5439 13.2529C33.8738 12.9232 34.4123 12.9233 34.7422 13.2529C35.0831 13.5828 35.0831 14.1105 34.7422 14.4404L14.4404 34.7422C14.2755 34.9071 14.0666 34.9951 13.8467 34.9951C13.6269 34.995 13.4178 34.9077 13.2529 34.7539C12.923 34.424 12.923 33.8846 13.2529 33.5547L14.1494 32.6562C13.9465 32.3717 13.7676 32.0626 13.6162 31.7295C13.2093 30.8497 13 29.8042 13 28.6055V19.3896C13.0001 15.3866 15.3865 13 19.3896 13H28.6055ZM34.5664 16.7285C34.8523 17.5093 34.9951 18.4 34.9951 19.3896V28.6055C34.9951 28.8555 34.9862 29.0997 34.9678 29.3369C34.6911 32.8979 32.3586 34.9951 28.6055 34.9951H19.3896L19.0234 34.9893C18.1791 34.958 17.4118 34.8166 16.7285 34.5664L22.6562 28.6387L22.8213 28.7383C23.6663 29.1997 24.7944 29.1025 25.5264 28.4736L30.1016 24.5479C30.9594 23.8111 32.3453 23.811 33.2031 24.5479L33.3457 24.6689V19.3896C33.3457 18.9169 33.3125 18.4771 33.2246 18.0703L34.5664 16.7285ZM19.3896 14.6494C16.2884 14.6494 14.6495 16.2884 14.6494 19.3896V28.6055C14.6494 29.4413 14.7922 30.1566 15.0342 30.7725L18.0703 28.7344L31.4668 15.3301C30.7263 14.8777 29.7675 14.6494 28.6055 14.6494H19.3896ZM20.6982 16.9814C22.1438 16.9814 23.3154 18.1531 23.3154 19.5986C23.3154 21.0442 22.1438 22.2158 20.6982 22.2158C19.2527 22.2158 18.0811 21.0442 18.0811 19.5986C18.0811 18.1531 19.2527 16.9815 20.6982 16.9814Z" fill="#EBEBEF" />
	</svg>
)